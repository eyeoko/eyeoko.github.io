# ------------------
# Ackermann function
# ------------------
#
# The Ackermann function, holds paramount significance in theoretical
# computer science and computability theory. Formulated by Wilhelm
# Ackermann, it stands as a fundamental example illustrating functions
# that transcend primitive recursion, showcasing the existence of
# computable problems that defy conventional algorithmic approaches.
# Its rapid growth, even for small inputs, makes it a powerful tool in
# complexity theory, establishing lower bounds on computational
# complexity and emphasizing the inherent challenges in designing
# efficient algorithms for certain problems. The Ackermann functionâ€™s
# prominence extends to symbolize the limits of computability, playing
# a crucial role in delineating what can and cannot be algorithmically
# computed within the theoretical realms of computer science.
#
# One can see the rapid growth in
# https://github.com/eyereasoner/eye/blob/master/reasoning/ackermann/ackermann-answer.n3
# where A(4,0) has a value of 2 digits, A(4,1) has a value of 5 digits
# and A(4,2) has a value of 19729 digits.

@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <#>.

# ackermann(x, y)
:ackermann_rule_main lingua:head _:ackermann_rule_main_head;
    lingua:body _:ackermann_rule_main_body.

_:ackermann_rule_main_head {
    (var:X var:Y) :ackermann var:A.
}

_:ackermann_rule_main_body {
    (var:Y 3) math:sum var:B.
    (var:X var:B 2) :ackermann var:C.
    (var:C 3) math:difference var:A.
}

# ackermann(x, y, z)
# succ (x=0)
:ackermann_rule0 lingua:head _:ackermann_rule0_head;
    lingua:body _:ackermann_rule0_body.

_:ackermann_rule0_head {
    (0 var:Y var:Z) :ackermann var:A.
}

_:ackermann_rule0_body {
    :true log:callWithCut true.
    (var:Y 1) math:sum var:A.
}

# sum (x=1)
:ackermann_rule1 lingua:head _:ackermann_rule1_head;
    lingua:body _:ackermann_rule1_body.

_:ackermann_rule1_head {
    (1 var:Y var:Z) :ackermann var:A.
}

_:ackermann_rule1_body {
    :true log:callWithCut true.
    (var:Y var:Z) math:sum var:A.
}

# product (x=2)
:ackermann_rule2 lingua:head _:ackermann_rule2_head;
    lingua:body _:ackermann_rule2_body.

_:ackermann_rule2_head {
    (2 var:Y var:Z) :ackermann var:A.
}

_:ackermann_rule2_body {
    :true log:callWithCut true.
    (var:Y var:Z) math:product var:A.
}

# exponentiation (x=3), tetration (x=4), pentation (x=5), hexation (x=6), etc
:ackermann_rule3plus lingua:head _:ackermann_rule3plus_head;
    lingua:body _:ackermann_rule3plus_body.

_:ackermann_rule3plus_head {
    (var:X 0 var:Z) :ackermann 1.
}

_:ackermann_rule3plus_body {
    :true log:callWithCut true.
}

:ackermann_rule_final lingua:head _:ackermann_rule_final_head;
    lingua:body _:ackermann_rule_final_body.

_:ackermann_rule_final_head {
    (var:X var:Y var:Z) :ackermann var:A.
}

_:ackermann_rule_final_body {
    (var:Y 1) math:difference var:B.
    (var:X var:B var:Z) :ackermann var:C.
    (var:X 1) math:difference var:D.
    (var:D var:C var:Z) :ackermann var:A.
}

# workaround to avoid true as subject
:true {
    () log:equalTo ().
}

# query
:ackermann_query lingua:question _:ackermann_question.

_:ackermann_question {
    (0 0) :ackermann var:A0.
    (0 6) :ackermann var:A1.
    (1 2) :ackermann var:A2.
    (1 7) :ackermann var:A3.
    (2 2) :ackermann var:A4.
    (2 9) :ackermann var:A5.
    (3 4) :ackermann var:A6.
    (3 14) :ackermann var:A7.
    (4 0) :ackermann var:A8.
    (4 1) :ackermann var:A9.
    #(4 2) :ackermann var:A10.      # leaving out because the proof is 2.5 GB
    (5 0) :ackermann var:A11.
}
