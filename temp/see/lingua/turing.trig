# --------------
# Turing Machine
# --------------
#
# Turing completeness test case.
# See http://en.wikipedia.org/wiki/Prolog#Turing_completeness

@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix lingua: <http://www.w3.org/2000/10/swap/lingua#>.
@prefix var: <http://www.w3.org/2000/10/swap/var#>.
@prefix : <#>.

# interpreter for Turing machine
:turing_rule1 lingua:head _:turing_rule1_head;
    lingua:body _:turing_rule1_body.

_:turing_rule1_head {
    () :compute var:OutTape.
}

_:turing_rule1_body {
    var:Machine :start var:I.
    (var:I () "#" ()) :find var:OutTape.
}

:turing_rule2 lingua:head _:turing_rule2_head;
    lingua:body _:turing_rule2_body.

_:turing_rule2_head {
    var:List :compute var:OutTape.
}

_:turing_rule2_body {
    var:List list:firstRest (var:Head var:Tail).
    var:Machine :start var:I.
    (var:I () var:Head var:Tail) :find var:OutTape.
}

:turing_rule3 lingua:head _:turing_rule3_head;
    lingua:body _:turing_rule3_body.

_:turing_rule3_head {
    (var:State var:Left var:Cell var:Right) :find var:OutTape.
}

_:turing_rule3_body {
    (var:State var:Cell var:Write var:Move) :tape var:Next.
    (var:Move var:Left var:Write var:Right var:A var:B var:C) :move true.
    (var:Next var:A var:B var:C) :continue var:OutTape.
}

:turing_rule4 lingua:head _:turing_rule4_head;
    lingua:body _:turing_rule4_body.

_:turing_rule4_head {
    (:halt var:Left var:Cell var:Right) :continue var:OutTape.
}

_:turing_rule4_body {
    var:Left :reverse var:R.
    var:List list:firstRest (var:Cell var:Right).
    (var:R var:List) list:append var:OutTape.
}

:turing_rule5 lingua:head _:turing_rule5_head;
    lingua:body _:turing_rule5_body.

_:turing_rule5_head {
    (var:State var:Left var:Cell var:Right) :continue var:OutTape.
}

_:turing_rule5_body {
    (var:State var:Left var:Cell var:Right) :find var:OutTape.
}

:turing_rule6 lingua:head _:turing_rule6_head;
    lingua:body _:turing_rule6_body.

_:turing_rule6_head {
    (:left () var:Cell var:Right () "#" var:L) :move true.
}

_:turing_rule6_body {
    var:L list:firstRest (var:Cell var:Right).
}

:turing_rule7 lingua:head _:turing_rule7_head;
    lingua:body _:turing_rule7_body.

_:turing_rule7_head {
    (:left var:List var:Cell var:Right var:Tail var:Head var:L) :move true.
}

_:turing_rule7_body {
    var:List list:firstRest (var:Head var:Tail).
    var:L list:firstRest (var:Cell var:Right).
}

:turing_rule8 lingua:head _:turing_rule8_head;
    lingua:body true.

_:turing_rule8_head {
    (:stop var:Left var:Cell var:Right var:Left var:Cell var:Right) :move true.
}

:turing_rule9 lingua:head _:turing_rule9_head;
    lingua:body _:turing_rule9_body.

_:turing_rule9_head {
    (:right var:Left var:Cell () var:L "#" ()) :move true.
}

_:turing_rule9_body {
    var:L list:firstRest (var:Cell var:Left).
}

:turing_rule10 lingua:head _:turing_rule10_head;
    lingua:body _:turing_rule10_body.

_:turing_rule10_head {
    (:right var:Left var:Cell var:List var:L var:Head var:Tail) :move true.
}

_:turing_rule10_body {
    var:List list:firstRest (var:Head var:Tail).
    var:L list:firstRest (var:Cell var:Left).
}

:turing_rule11 lingua:head _:turing_rule11_head;
    lingua:body true.

_:turing_rule11_head {
    () :reverse ().
}

:turing_rule12 lingua:head _:turing_rule12_head;
    lingua:body _:turing_rule12_body.

_:turing_rule12_head {
    var:List :reverse var:Reverse.
}

_:turing_rule12_body {
    var:List list:firstRest (var:Head var:Tail).
    var:Tail :reverse var:R.
    (var:R (var:Head)) list:append var:Reverse.
}

# a Turing machine to add 1 to a binary number
:add1 :start 0.

(0 0 0 :right) :tape 0.
(0 1 1 :right) :tape 0.
(0 "#" "#" :left) :tape 1.
(1 0 1 :stop) :tape :halt.
(1 1 0 :left) :tape 1.
(1 "#" 1 :stop) :tape :halt.

# query
:turing_query lingua:question _:turing_question.

_:turing_question {
    (1 0 1 0 0 1) :compute var:A1.
    (1 0 1 1 1 1) :compute var:A2.
    (1 1 1 1 1 1) :compute var:A3.
    () :compute var:A4.
}
