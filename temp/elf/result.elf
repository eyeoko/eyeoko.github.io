% running examples/complex.elf
'elf:exp'([[-1,0],[0.5,0]],[6.123233995736766e-17,1.0]) => true.
'elf:exp'([[e,0],[0,pi]],[-1.0,1.2246467991473532e-16]) => true.
'elf:log'([[e,0],[-1,0]],[0.0,3.141592653589793]) => true.
'elf:log'([[0,1],[0,1]],[1.0,0.0]) => true.
'elf:sin'([1.570796326794897,1.316957896924817],[2.0000000000000004,-6.631275506809351e-16]) => true.
'elf:cos'([0,-1.316957896924817],[2.0000000000000004,0.0]) => true.
'elf:tan'([1.338972522294493,0.4023594781085251],[1.000000000000001,1.9999999999999982]) => true.
'elf:asin'([2,0],[1.5707963267948966,1.3169578969248166]) => true.
'elf:acos'([2,0],[0.0,-1.3169578969248166]) => true.
'elf:atan'([1,2],[1.3389725222944935,0.4023594781085251]) => true.

% running examples/dt.elf
'rdf:type'('eg:z','eg:N1') => true.
'rdf:type'('eg:z','eg:N10') => true.
'rdf:type'('eg:z','eg:N100') => true.
'rdf:type'('eg:z','eg:N1000') => true.
'rdf:type'('eg:z','eg:N10000') => true.

% running examples/easter.elf
'elf:easter'(2021,[4,4]) => true.
'elf:easter'(2022,[4,17]) => true.
'elf:easter'(2023,[4,9]) => true.
'elf:easter'(2024,[3,31]) => true.
'elf:easter'(2025,[4,20]) => true.
'elf:easter'(2026,[4,5]) => true.
'elf:easter'(2027,[3,28]) => true.
'elf:easter'(2028,[4,16]) => true.
'elf:easter'(2029,[4,1]) => true.
'elf:easter'(2030,[4,21]) => true.
'elf:easter'(2031,[4,13]) => true.
'elf:easter'(2032,[3,28]) => true.
'elf:easter'(2033,[4,17]) => true.
'elf:easter'(2034,[4,9]) => true.
'elf:easter'(2035,[3,25]) => true.
'elf:easter'(2036,[4,13]) => true.
'elf:easter'(2037,[4,5]) => true.
'elf:easter'(2038,[4,25]) => true.
'elf:easter'(2039,[4,10]) => true.
'elf:easter'(2040,[4,1]) => true.
'elf:easter'(2041,[4,21]) => true.
'elf:easter'(2042,[4,6]) => true.
'elf:easter'(2043,[3,29]) => true.
'elf:easter'(2044,[4,17]) => true.
'elf:easter'(2045,[4,9]) => true.
'elf:easter'(2046,[3,25]) => true.
'elf:easter'(2047,[4,14]) => true.
'elf:easter'(2048,[4,5]) => true.
'elf:easter'(2049,[4,18]) => true.
'elf:easter'(2050,[4,10]) => true.

% running examples/fibonacci.elf
'elf:fibonacci'(1,1) => true.
'elf:fibonacci'(10,55) => true.
'elf:fibonacci'(100,354224848179261915075) => true.
'elf:fibonacci'(1000,43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875) => true.
'elf:fibonacci'(10000,33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875) => true.

% running examples/gps.elf
'elf:findpath'('eg:map_be',['elf:location'('eg:i1','eg:oostende'),['eg:drive_gent_brugge','eg:drive_brugge_oostende'],2400.0,0.01,0.9408,0.99,[5000.0,5.0,0.2,0.4,1]]) => true.
'elf:findpath'('eg:map_be',['elf:location'('eg:i1','eg:oostende'),['eg:drive_gent_kortrijk','eg:drive_kortrijk_brugge','eg:drive_brugge_oostende'],4100.0,0.018000000000000002,0.903168,0.9801,[5000.0,5.0,0.2,0.4,1]]) => true.

% running examples/graph.elf
'elf:path'('eg:paris','eg:nantes') => true.
'elf:path'('eg:chartres','eg:nantes') => true.
'elf:path'('eg:lemans','eg:nantes') => true.
'elf:path'('eg:angers','eg:nantes') => true.

% running examples/lee.elf
'elf:route'([[1,1],[9,8],[[[2,3],[4,5]],[[6,6],[8,8]]]],[[9,8],[9,7],[9,6],[9,5],[8,5],[7,5],[6,5],[5,5],[5,4],[5,3],[5,2],[4,2],[3,2],[2,2],[1,2],[1,1]]) => true.

% running examples/mi.elf
'elf:mi'(['elf:mi'(['elf:factorial'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'(0,-),-),-),-),-),'elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'('elf:s'(0,-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-),-))],-)],-) => true.

% running examples/padovan.elf
'elf:padovan'(1,1) => true.
'elf:padovan'(10,9) => true.
'elf:padovan'(100,888855064897) => true.
'elf:padovan'(1000,72428926648244409475025064434360344869036057631812487293633154973026123860267808630768185105127650714516006185052479679199) => true.
'elf:padovan'(10000,934809306417090296591942383071105664554631045001558969511344513706271430404218840102164109691688008586235368022807277827723134431411826756528361469053094324293207003449763706168181085935430314549128576352436030901601291712108192990167520542102829831875713851191342668893246629424051549004843961405439172719792939812736018716101643761371668019692005735591890862540298764004477635783767271603870857984425712232535048483138476633342236535115629120381755262514720444266886041448397947443348024570802104899883861056662849228527139945511514642420495455568317751233672577066231195609646535582392092123937427799857769408472159900892194405630611576199748755222886435258343715017516059774088161781723430576541892252517821895585829709329963047470669789541814558066121753735142858669145245013015983112318766868288359997214914473988118661297642439846880494290732964806504635086437132604416893853792023921871262824437144731143796235240685106505938904272499619369520742835275047869345242022143048357017492485544202176379406264771312671673533281906780966083197039410692631491903917465666048661312579493891510089406360493972238908760196459314509130812157959829918494977720617581500144901317889438670080753948890248660224527998836773426074) => true.

% running examples/patch.elf

% running examples/polygon.elf
'elf:area'([[3,2],[6,2],[7,6],[4,6],[5,5],[5,3],[3,2]],7.5) => true.

% running examples/sdcoding.elf
'elf:sdcoding'(1,1) => true.
'elf:sdcoding'(3,3) => true.
'elf:sdcoding'(0,0) => true.
'elf:sdcoding'(2,2) => true.

% running examples/socrates.elf
'rdf:type'('eg:Socrates','eg:Mortal') => true.
'rdf:type'('eg:Socrates','eg:Man') => true.

% running examples/turing.elf
'elf:compute'([1,0,1,0,0,1],[1,0,1,0,1,0,"#"]) => true.
'elf:compute'([1,0,1,1,1,1],[1,1,0,0,0,0,"#"]) => true.
'elf:compute'([1,1,1,1,1,1],[1,0,0,0,0,0,0,"#"]) => true.
'elf:compute'([],[1,"#"]) => true.

% running examples/witness.elf
'elf:domain_predicate'('eg:hasParent',-),'elf:builtin'('eg:hasParent'('eg:Pat',A)=..['eg:hasParent','eg:Pat',A],-),'eg:hasParent'('eg:Pat',A) => true.
'elf:domain_predicate'('rdf:type',-),'elf:builtin'('rdf:type'(A,'eg:Person')=..['rdf:type',A,'eg:Person'],-),'rdf:type'(A,'eg:Person') => true.
'elf:domain_predicate'('rdf:type',-),'elf:builtin'('rdf:type'('eg:Pat','eg:Person')=..['rdf:type','eg:Pat','eg:Person'],-),'rdf:type'('eg:Pat','eg:Person') => true.
'elf:domain_predicate'('eg:hasParent',-),'elf:builtin'('eg:hasParent'(A,B)=..['eg:hasParent',A,B],-),'eg:hasParent'(A,B) => true.
'elf:domain_predicate'('rdf:type',-),'elf:builtin'('rdf:type'(B,'eg:Person')=..['rdf:type',B,'eg:Person'],-),'rdf:type'(B,'eg:Person') => true.
'elf:domain_predicate'('eg:hasParent',-),'elf:builtin'('eg:hasParent'(B,C)=..['eg:hasParent',B,C],-),'eg:hasParent'(B,C) => true.
'elf:domain_predicate'('rdf:type',-),'elf:builtin'('rdf:type'(C,'eg:Person')=..['rdf:type',C,'eg:Person'],-),'rdf:type'(C,'eg:Person') => true.

