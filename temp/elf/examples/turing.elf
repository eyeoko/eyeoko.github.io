% See https://en.wikipedia.org/wiki/Universal_Turing_machine

'elf:directive'(use_module(library(lists)),-).

%
% interpreter for Univeral Turing Machine
%
'elf:compute'([],OutTape) <=
    'elf:start'(_MACHINE,I),
    'elf:find'([I,[],"#",[]],OutTape).
'elf:compute'([Head|Tail],OutTape) <=
    'elf:start'(_MACHINE,I),
    'elf:find'([I,[],Head,Tail],OutTape).

'elf:find'([State,Left,Cell,Right],OutTape) <=
    'elf:t'([State,Cell,Write,Move],Next),
    'elf:move'([Move,Left,Write,Right],[A,B,C]),
    'elf:continue'([Next,A,B,C],OutTape).

'elf:continue'(["halt",Left,Cell,Right],OutTape) <=
    'elf:builtin'(reverse(Left,R),-),
    'elf:builtin'(append(R,[Cell|Right],OutTape),-).
'elf:continue'([State,Left,Cell,Right],OutTape) <=
    'elf:find'([State,Left,Cell,Right],OutTape).

'elf:move'(["l",[],Cell,Right],[[],"#",[Cell|Right]]).
'elf:move'(["l",[Head|Tail],Cell,Right],[Tail,Head,[Cell|Right]]).
'elf:move'(["s",Left,Cell,Right],[Left,Cell,Right]).
'elf:move'(["r",Left,Cell,[]],[[Cell|Left],"#",[]]).
'elf:move'(["r",Left,Cell,[Head|Tail]],[[Cell|Left],Head,Tail]).

%
% a Turing machine to add 1 to a binary number
%
'elf:start'("add1",0).

'elf:t'([0,0,0,"r"],0).
'elf:t'([0,1,1,"r"],0).
'elf:t'([0,"#","#","l"],1).
'elf:t'([1,0,1,"s"],"halt").
'elf:t'([1,1,0,"l"],1).
'elf:t'([1,"#",1,"s"],"halt").

% query
'elf:compute'([1,0,1,0,0,1],_ANSWER) => true.
'elf:compute'([1,0,1,1,1,1],_ANSWER) => true.
'elf:compute'([1,1,1,1,1,1],_ANSWER) => true.
'elf:compute'([],_ANSWER) => true.
