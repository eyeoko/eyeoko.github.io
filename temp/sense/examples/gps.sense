% Goal driven Parallel Sequences -- Jos De Roo
% See background paper https://arxiv.org/pdf/2010.12027.pdf

% find paths in the state space from initial state to goal state within limits
'sense:findpath'(_SCOPE,[Goal,Path,Duration,Cost,Belief,Comfort,Limits]) <=
    'sense:findpaths'([],[Goal,[],0.0,0.0,1.0,1.0,Path,Duration,Cost,Belief,Comfort,Limits]).

'sense:findpaths'(_Maps,[Goal,Path,Duration,Cost,Belief,Comfort,Path,Duration,Cost,Belief,Comfort,_Limits]) <=
    'sense:builtin'(call(Goal),-),
    'sense:builtin'(!,-).
'sense:findpaths'(Maps_s,[Goal,Path_s,Duration_s,Cost_s,Belief_s,Comfort_s,Path,Duration,Cost,Belief,Comfort,Limits]) <=
    'sense:builtin'(Limits = [MaxDuration,MaxCost,MinBelief,MinComfort,MaxStagecount],-),
    'sense:builtin'(clause(
        'sense:description'(Map,[From,Transition,To,Action,Duration_n,Cost_n,Belief_n,Comfort_n]),
        Where
    ),-),
    'sense:builtin'(call(From),-),
    'sense:builtin'(call(Where),-),
    'sense:description'(Map,[From,Transition,To,Action,Duration_n,Cost_n,Belief_n,Comfort_n]),
    'sense:builtin'(append(Maps_s,[Map],Maps_t),-),
    'sense:stagecount'(Maps_t,Stagecount),
    'sense:builtin'(Stagecount =< MaxStagecount,-),
    'sense:builtin'(Duration_t is Duration_s+Duration_n,-),
    'sense:builtin'(Duration_t =< MaxDuration,-),
    'sense:builtin'(Cost_t is Cost_s+Cost_n,-),
    'sense:builtin'(Cost_t =< MaxCost,-),
    'sense:builtin'(Belief_t is Belief_s*Belief_n,-),
    'sense:builtin'(Belief_t >= MinBelief,-),
    'sense:builtin'(Comfort_t is Comfort_s*Comfort_n,-),
    'sense:builtin'(Comfort_t >= MinComfort,-),
    'sense:builtin'(append(Path_s,[Action],Path_t),-),
    'sense:becomes'(From,To),
    'sense:builtin'(call_cleanup(
        'sense:findpaths'(Maps_t,[Goal,Path_t,Duration_t,Cost_t,Belief_t,Comfort_t,Path,Duration,Cost,Belief,Comfort,Limits]),
        'sense:becomes'(To,From)
    ),-).

% counting the number of stages (a stage is a sequence of steps in the same map)
'sense:stagecount'([],1).
'sense:stagecount'([C,E|_],B) <=
    'sense:builtin'(C \= E,-),
    'sense:builtin'(!,-),
    'sense:stagecount'(_,G),
    'sense:builtin'(B is G+1,-).
'sense:stagecount'([_|D],B) <=
    'sense:stagecount'(D,B).

% linear implication
'sense:becomes'(A,B) <=
    'sense:builtin'(catch(A,_,fail),-),
    'sense:conj_list'(A,C),
    'sense:builtin'(forall(
        'sense:builtin'(member(D,C),-),
        'sense:builtin'(retract(D),-)
    ),-),
    'sense:conj_list'(B,E),
    'sense:builtin'(forall(
        'sense:builtin'(member(F,E),-),
        'sense:builtin'(assert(F),-)
    ),-).

'sense:conj_list'(true,[]).
'sense:conj_list'(A,[A]) <=
    'sense:builtin'(A \= (_,_),-),
    'sense:builtin'(A \= false,-),
    'sense:builtin'(!,-).
'sense:conj_list'((A,B),[A|C]) <=
    'sense:conj_list'(B,C).

% test data
% partial map of Belgium
'sense:description'(
    'eg:map_be',
    [   'sense:location'(S,'eg:gent'),
        true,
        'sense:location'(S,'eg:brugge'),
        'eg:drive_gent_brugge',
        1500.0,
        0.006,
        0.96,
        0.99
    ]
).
'sense:description'(
    'eg:map_be',
    [   'sense:location'(S,'eg:gent'),
        true,
        'sense:location'(S,'eg:kortrijk'),
        'eg:drive_gent_kortrijk',
        1600.0,
        0.007,
        0.96,
        0.99
    ]
).
'sense:description'(
    'eg:map_be',
    [   'sense:location'(S,'eg:kortrijk'),
        true,
        'sense:location'(S,'eg:brugge'),
        'eg:drive_kortrijk_brugge',
        1600.0,
        0.007,
        0.96,
        0.99
    ]
).
'sense:description'(
    'eg:map_be',
    [   'sense:location'(S,'eg:brugge'),
        true,
        'sense:location'(S,'eg:oostende'),
        'eg:drive_brugge_oostende',
        900.0,
        0.004,
        0.98,
        1.0
    ]
).

% current state
true => 'sense:location'('eg:i1','eg:gent').

% query
'sense:findpath'(
    'eg:map_be',
    [   'sense:location'(_SUBJECT,'eg:oostende'),
        _PATH,
        _DURATION,
        _COST,
        _BELIEF,
        _COMFORT,
        [5000.0,5.0,0.2,0.4,1]
    ]
) => true.
